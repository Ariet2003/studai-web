// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Модель пользователя
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // Null для пользователей через Google
  name          String?   // ФИО как одно поле
  emailVerified DateTime?
  image         String?
  
  // Настройки двухфакторной аутентификации
  twoFactorEnabled    Boolean @default(false)
  twoFactorSecret     String?
  backupCodes         String? // JSON строка с кодами восстановления
  
  // OAuth аккаунты
  accounts Account[]
  
  // Сессии
  sessions Session[]
  
  // Верификация email
  verificationTokens VerificationToken[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("users")
}

// Аккаунты OAuth (Google и др.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Сессии пользователей
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Токены для верификации email и сброса пароля
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String   // email
  token      String   @unique
  type       String   // "email_verification", "password_reset", "2fa_setup"
  expires    DateTime
  userId     String?
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Коды верификации для регистрации
model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String
  expires   DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  @@unique([email, code])
  @@map("verification_codes")
}
